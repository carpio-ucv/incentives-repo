datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
# describe variables
str(datasetMG_allPartic)
# drop participants from other studies
## those in which the variable study is different than 5 (current study),
## that is 0 (testing), 2 or 4
datasetMG<-datasetMG_allPartic[!datasetMG_allPartic$study!=5,]
# check names of the dataset
names(datasetMG)
# drop variables that I am not going to use
dataMG <- datasetMG[,c(2,3,5,6,8,17)]
head(dataMG)
datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
datasetMG_allPartic <- read.csv("C:/Users/K56CADesktop/gambles.csv")
datasetMG_allPartic <- read.csv("C:/Users/K56CA/Desktop/gambles.csv")
# describe variables
str(datasetMG_allPartic)
# drop participants from other studies
## those in which the variable study is different than 5 (current study),
## that is 0 (testing), 2 or 4
datasetMG<-datasetMG_allPartic[!datasetMG_allPartic$study!=5,]
# check names of the dataset
names(datasetMG)
# drop variables that I am not going to use
dataMG <- datasetMG[,c(2,3,5,6,8,17)]
head(dataMG)
# check class of the variables
sapply(dataMG,class)
# change class if needed
## make identifiers strings and measurements numeric
# YOU MAY NOT WANT TO DO THIS
dataMG$type <- toString(dataMG$type)
dataMG$gamble_family <- toString(dataMG$gamble_family)
dataMG$gamble_subfamily <- toString(dataMG$gamble_subfamily)
dataMG$iteration <- toString(dataMG$iteration)
dataMG$id_participant <- toString(dataMG$id_participant)
dataMG$prob_p <- as.numeric(dataMG$prob_p)
head( dataMG$type)
library("dplyr", lib.loc="~/R/win-library/3.2")
datasetMG<-datasetMG_allPartic[!datasetMG_allPartic$study!=5,]
# check names of the dataset
names(datasetMG)
# drop variables that I am not going to use
dataMG <- datasetMG[,c(2,3,5,6,8,17)]
head(dataMG)
# check class of the variables
sapply(dataMG,class)
cast(dataMG, id_participant .~ )
cast(dataMG, id_participant ~. )
library("reshape2", lib.loc="~/R/win-library/3.2")
cast(dataMG, id_participant ~. )
dcast(dataMG, id_participant ~. )
names(datasetMG)
dataMG <- datasetMG[,c(2,3,5,6,8,17)]
head(dataMG)
df<-dcast(dataMG, id_participant ~ type, gamble_family,
gamble_subfamily, iteration prob_p)
df<-dcast(dataMG, id_participant ~ type, gamble_family,
gamble_subfamily, iteration, prob_p)
df<-dcast(dataMG, id_participant ~ type, gamble_family, gamble_subfamily, iteration, prob_p)
df<-dcast(dataMG, id_participant ~ type + gamble_family +
gamble_subfamily+ iteration+ prob_p)
df<-dcast(dataMG, id_participant ~ type + gamble_family +
gamble_subfamily+ iteration, value.var =  prob_p)
datasetMG <- mutate(datasetMG, gamble = paste(dataMG$type,dataMG$gamble_family, dataMG$gamble_subfamily,
dataMG$iteration, sep=""))
head(datasetMG)
df<-dcast(dataMG, id_participant ~ type + gamble_family +
gamble_subfamily+ iteration, value.var =  prob_p)
datasetMG<-datasetMG_allPartic[!datasetMG_allPartic$study!=5,]
dataMG <- datasetMG[,c(2,3,5,6,8,17)]
new.datasetMG <- mutate(datasetMG, gamble = paste(dataMG$type,dataMG$gamble_family, dataMG$gamble_subfamily,
dataMG$iteration, sep=""))
names(dataMG)
names(new.dataMG)
new.datasetMG <- mutate(datasetMG, gamble = paste(dataMG$type,dataMG$gamble_family, dataMG$gamble_subfamily,
dataMG$iteration, sep=""))
names(new.datasetMG)
head(dataMG)
clean.data <- mutate(datasetMG, gamble = paste(type, gamble_family, gamble_subfamily,
iteration, sep=""))
head(clean.data)
clean.data <- mutate(dataMG, gamble = paste(type, gamble_family, gamble_subfamily,
iteration, sep=""))
head(clean.data)
clean.data2 <- dcast(clean.data, gamble~ prob_p)
clean.data2 <- dcast(clean.data, gamble~ id_participant,
value.var=prob_p)
clean.data2 <- dcast(clean.data, gamble~ id_participant + prob_p)
clean.data2 <- dcast(clean.data,  prob_p~ gamble
)
clean.data2 <- dcast(clean.data, type + id_participant + gamble_family +
gamble_subfamily + iteration  ~ gamble,
value.var = prob_p)
head(clean.data$prob_p)
clean.data2 <- dcast(clean.data, type + id_participant + gamble_family +
gamble_subfamily + iteration  ~ gamble)
clean.data2 <- dcast(clean.data, type + id_participant + gamble_family +
gamble_subfamily + iteration  ~ gamble,
value.var = prob_p)
clean.data <- mutate(dataMG, gamble = paste(type, gamble_family, gamble_subfamily,
iteration, sep=""))
clean.data2 <- dcast(clean.data, type + id_participant + gamble_family +
gamble_subfamily + iteration  ~ gamble,
value.var = prob_p)
clean.data2 <- dcast(clean.data, type + id_participant + gamble_family +
gamble_subfamily + iteration ~ gamble,
value.var = id_participant)
clean.data2 <- dcast(clean.data, type + gamble_family +
gamble_subfamily + iteration ~ gamble,
value.var = id_participant)
clean.data2 <- dcast(clean.data, type + id_participant + gamble_family +
gamble_subfamily + iteration ~ gamble,
value.var = "prob_p")
head(clean.data2)
dim(clean.data)
dim(clean.data$prob_p)
head(clean.data$prob_p)
head(clean.data$prob_p, 50)
head(clean.data)
clean.data <- mutate(dataMG, gamble = paste(type, gamble_family, gamble_subfamily,
iteration, sep="")) %>%
select(id.participant, prob_p, gamble)
clean.data <- mutate(dataMG, gamble = paste(type, gamble_family, gamble_subfamily,
iteration, sep="")) %>%
select(id_participant, prob_p, gamble)
head(clean.data)
clean.data2 <- dcast(clean.data, id_participant ~ gamble,
value.var = "prob_p")
head(clean.data2)
clean.data <- mutate(dataMG, gamble = paste(type, gamble_family, gamble_subfamily,
iteration, sep="")) %>%
select(id_participant, prob_p, gamble) %>%
dcast(id_participant ~ gamble, value.var = "prob_p")
head(clean.data)
